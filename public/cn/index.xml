<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ergo</title>
    <link>https://ergoplatform.org/cn/</link>
    <description>Recent content on Ergo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 19 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ergoplatform.org/cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>“ 发布尔格主网3.2.1版本 ”</title>
      <link>https://ergoplatform.org/cn/news/2020_02_19/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2020_02_19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格平台Discord 平台已经推出了</title>
      <link>https://ergoplatform.org/cn/news/2020_01_23/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2020_01_23/</guid>
      <description></description>
    </item>
    
    <item>
      <title>(Jean Philippe Aumasson 所进行的)安全审查</title>
      <link>https://ergoplatform.org/cn/blog/2020_01_12_security_audit/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2020_01_12_security_audit/</guid>
      <description>我们想宣布尔格已经成功通过某些(最关键的)部分的安全审查。此次审查由 Jean- Philipee Aumasson 负责完成(也叫 veorq, https://aumasson.jp/ )。
具体报告如下。没有发现任何重大问题。对所发现问题的评论如下:
  关于钱包密码，我们将在下一版协议节点中提供建议。不确定密码法的执法力度会 到何种程度，但我们会对此做更多的咨询。
  只有在启动新网络时修改”n”和”k”参数才有意义。修改挖掘节点中的这些参数将使 所生成的区块对其他节点来说无效。修改协议节点的该项参数意味着出现另一个分 叉(来自诚实协议参与者的区块将被拒绝)。所以可能不需要进行额外核验，因为 那些启动新网络的人会正确设置”n”和”k”的参数。
  目前尔格节点(以及我们所知道的其他区块链协议节点和钱包，以及我们正在使用 的加密库)无法提供防止本地运行的侧通道攻击的保护(如恶意软件或病毒所发起 的时序攻击或内存检查)。所以，请保护好运行你钱包的设备!
  ============================================================================== =============================
% 尔格安全性评估% Jean-Philippe Aumasson % 2019 年 12 月日
摘要 尔格团队邀请我们对其尔格平台的几个组件进行安全性评估
 创建与验证西格玛协议证明 钱包对秘密的安全存储 工作量证明验证  这份简报介绍了我们的评估，并说明了我们所发现的问题以及应对措施建议。
西格玛协议证明 尔格协议依赖于尔格脚本，其是一种支持西格玛语句的脚本语言，可以通过非交互式的 知识证明来进行证明以及验证。
这些证明是一个类似于树的语句和/或阈值条件，其树叶是离散对数问题的知识证明。
西格玛语句证明是非交互式的，这应归功于 Fiat-Shamir 的转换
该逻辑在尔格脚本报告中有详细说明，并且详细的证明与验证流程在其附录 A 中有介 绍。
实施过程中的挑战包括:
  定义安全高效证明的编码，并且实现总是成功处理有效输入的序列化，以及总是无法处 理无效输入的反序列化。
  根据规范正确地实现证明与验证功能，最重要的是确保没有无效语句能够成功通过验 证。
  我们对这两个方面进行了回顾，根据存储库 sigmastate-interpreter中的代码和尔格脚本报 告，对(附录 A 中的)预期行为与实际所采取的行为进行仔细比较。</description>
    </item>
    
    <item>
      <title>安全审核 (审核员 Philippe Aumasson)</title>
      <link>https://ergoplatform.org/cn/news/2020_01_12/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2020_01_12/</guid>
      <description></description>
    </item>
    
    <item>
      <title>发布尔格主网3.2.0版本</title>
      <link>https://ergoplatform.org/cn/news/2020_01_07/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2020_01_07/</guid>
      <description></description>
    </item>
    
    <item>
      <title>去中心化方面的新探索，第一部分：技术方面</title>
      <link>https://ergoplatform.org/cn/blog/2019_12_12_new_quest/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_12_12_new_quest/</guid>
      <description>尽管当今此领域最活跃话题是如何普及区块链技术（这通常意味着出售给华尔街）以及如何与维萨卡和万事达卡等系统进行竞争（这通常意味着利用去中心化而放弃，或以效率的名义引入不明确的安全假设），显然有必要对加密货币变化的原因进行重新审视，这些变化大多与去中心化有关。我接下来将在此给出许多问题的明确答案。将90%的比特币开采能力都集中在一个房间里? 是否可行？两三个矿池控制大部分算力是否可能？审查也可行吗？让几乎全部新节点避免处理来自其创世区块的区块链是否可行？工作量证明货币开发者正在做一个旨在改变一致性算法的硬叉，使其再次变得对图形处理器(GPU)友好是否可行？我们能否总结一下与去中心化相关的全部问题？我们能否用技术手段解决大部分问题？
去中心化涵盖技术、社会及跨界等众多领域的多个问题。研究人员和开发人员正在努力寻找技术解决方案，首选完美且高效的解决方案。然而，对于许多问题而言，依然没有找到解决方案，因此就需要社会解决方案。
在这篇文章中，我将只讨论去中心化的技术方面，即采矿的去中心化和验证的去中心化。
采矿的去中心化 关于采矿去中心化的两个最大的问题是专用硬件（如专用集成电路(ASICs)）和中心化池。
凭借专用集成电路，一个拥有足够资金投资研发的大玩家可以从私人拥有的高效硬件中获得不公平优势。原则上来讲，对于任何类型的计算活动，开发性能优于商用计算设备（如CPUs 和GPUs）的专用硬件永远都是可能的。然而，对于不同的计算任务而言，研发努力与可能的结果却可能大相径庭。搜索一个完美（或者近似完美结果）背后的推理可能相当复杂（参见30多页厚的Equihash报告).
对于大部分工作量证明加密货币而言（包括比特币、以太坊、ZCash），2-4个中心化挖矿池控制着大部分开采力。这可能意味着审查变得容易或者进行提前交易（例如，对交易所订单进行重新排序），因为在中心化池中，只有中心化池自己才有权决定其所负责的整个池中的候选区块。作为一种可能的结果，不可外包的采矿方案可以防止中心化池的出现。只有尔格平台因部署了一个名为奥托吕克斯共识协议(Autolykos)的实用性不可外包工作量证明方案（基于Equihash报告中据说是更难记忆的问题）而闻名。
作为社会去中心化问题符合采矿去中心化的一个例子，有时工作量证明的开发者正在引入硬叉，以便一旦ASICs在未来主宰了挖矿市场，则工作量证明算法会对图形处理器再次变得友好。然而，尚不清楚为什么完全合法的活动总是被禁止，为什么开发人员（以及部分用户）可以出于特殊原因而做硬叉。
验证的去中心化 验证的去中心化是关于核实区块链历史有效性的可能性。这种核实使人确信没有不好的东西（即：不符合协议）被注入到区块链中，从而给予用户拒绝恶意区块链的权利，即使其比其他方法吸收了更多的工作量。当用户激活软叉（UASF）的想法开始走红时，社会上有很多有关比特币社区此项权力的讨论。很好地总结了这种思维方式。最近一篇题为“谁为比特币担保”的文章很好的总结了这种思维模式。
如果一个实体能够在合理的时间范围内通过花费数百万美元租用数据中心来进行验证，那么这个网络显然不是去中心化的。理想情况下，应该可以在商用硬件（如一台像样的笔记本电脑）上检查整个区块链的完整性。
然而，新的区块链也倾向于吸收越来越多的功能，而且这些功能并非免费的。然后，研究社区的主题是关于如何在合理的假设下，通过修剪区块或系统状态（或两者）来检查整个区块链的完整性。这里可能的解决方案有：引导状态速览及基于此的区块链后缀（在以太坊协议节点中比较流行，甚至在一篇学术论文)中正式提出）、无状态节点（在尔格平台上实现 部分无状态，或者目前只存在于研究论文中的完全无状态）。</description>
    </item>
    
    <item>
      <title>如何设置与配置全尔格节点</title>
      <link>https://ergoplatform.org/cn/blog/2019_12_02_how_to_setup/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_12_02_how_to_setup/</guid>
      <description>本教程将解释如何安装与运行全尔格节点。其不涉及采矿相关的内容。
节点安全 节点的使用涉及几个重要方面的内容，你的钱包和钱的安全性取决于以下方面:
 尔格节点需要在配置文件中存储安全关键参数。你永远不应把这个文件公开。 尔格节点提供用于与内置钱包互动的REST API。敏感的API方法需要一个安全令牌，你永远不要通过不可靠的渠道发送该令牌。 访问尔格REST API必须限制在认识的主机上。尤其是绝不允许通过互联网访问API。  先决条件 为了运行尔格节点，你需要JRE版本&amp;gt;= 将要安装的8。其中一种安装方式是使用 甲骨文安装Java.
接下来需要下载最新的尔格客户端发行版 jar文件，并且创建一个节点配置文件。
注意：你不用下载jar，你可以克隆资源库，然后通过发布sbt assembly指令，自己利用SBT 来创建jar。
ergo_folder是指存放jar的文件夹。
首席运行节点 创建在ergo_folder中含有以下文本的配置文件ergo.conf。
ergo { directory = ${ergo.directory}&amp;#34;/.ergo&amp;#34; node { mining = false } wallet.secretStorage.secretDir = ${ergo.directory}&amp;#34;/wallet/keystore&amp;#34; } 参数${ergo.directory}指向jar运行的目录。向ergo_folder开启命令提示符和cd。然后发出以下命令来首次运行节点：
java -jar ergo-&amp;lt;release&amp;gt;.jar --mainnet -c ergo.conf 之后节点将立即开始同步。API启动与进入到下一步需要等几分钟。
注意：对于文件你可以使用任何名称，而非ergo.conf。全部配置参数将被传送给该文件，你只需要重写你想修改缺省值的参数。上述配置文件实际上有缺省值。
计算你秘密的哈希值 首先，选择一个秘密来保护你的API。然后前往 http://127.0.0.1:9053/swagger#/utils/hashBlake2b 然后调用API来计算你秘密的哈希值。参考下图。
复制含有哈希值的回复以便下一步使用（参见下图）。在我们的例子中，秘密是是 hello 谁的哈希值对应324dcf027dd4a30a932c441f365a25e86b173defa4b8e58948253471b81b72cf.
重要提示：你必须使用不同且比较复杂的秘密.
利用API关键哈希值来更新配置文件 编辑配置文件ergo.conf然后粘贴前步所复制的哈希值。文件内容应当看似如下：
ergo { directory = ${ergo.directory}&amp;#34;/.ergo&amp;#34; node { mining = false } wallet.secretStorage.secretDir = ${ergo.directory}&amp;#34;/wallet/keystore&amp;#34; } scorex { restApi { # Hex-encoded Blake2b256 hash of an API key.</description>
    </item>
    
    <item>
      <title>发布尔格主网3.1.2版本</title>
      <link>https://ergoplatform.org/cn/news/2019_10_14/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_10_14/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hotbit交易所上线ERGO (ERG)</title>
      <link>https://ergoplatform.org/cn/news/2019_10_08_2/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_10_08_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>发布尔格主网3.1.1版本</title>
      <link>https://ergoplatform.org/cn/news/2019_10_08/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_10_08/</guid>
      <description></description>
    </item>
    
    <item>
      <title>BISQ 已经正式了加了尔格币(ERG)</title>
      <link>https://ergoplatform.org/cn/news/2019_09_16/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_09_16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格币($ERG) 已经在P2PB2B交易所挂牌交易</title>
      <link>https://ergoplatform.org/cn/news/2019_09_14/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_09_14/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格和众筹</title>
      <link>https://ergoplatform.org/cn/blog/2019_09_06_crowdfund/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_09_06_crowdfund/</guid>
      <description>什么是众筹？ 众筹是一种通过许多人的努力实现一种融资方式。众筹多通过全球网站启动，使项目和企业可以通过众多个人的小额出资来完成融资。通过众筹方式成功创业的最经典案例之一就是虚拟现实耳麦 - Oculus Rift。Oculus VR公司在2012年发起众筹，仅在两年后就被脸书以20亿美元的价格所收购。除了常规创业企业以外，还有许多区块链项目也选择采取众筹模式，例如：乙太坊、Tron和EOS。目前市场上有无数众筹平台。部分较大的众筹平台包括Indiegogo、Kickstarter和Gofundme，不一而足。众筹方式有很多好处：覆盖面广、高效以及最具说服力的营销… 但是现在，让我们看一下其最核心的一点！
为尔格引入众筹模式 就在几天前的8月28日，核心开发者 Kushti 在（尔格论坛上）[www.ergoforum.org]表示他成功写出并且实施可以让用户在尔格区块链开展众筹活动的代码（如白皮书第6页. 所述。该代码甚至与当前的钱包API相结合。这里是如何建立钱包的快速指南。在这篇文章中，你将学习如何具体开展尔格众筹工作！还将带你看一下有史以来首次众筹建议书，其将为EIP1后众筹文本撰写工作提供资金支持。如果你想了解更多细节，请阅读以下“脚本”章节。此外，你也可以跳过这一章，直接阅读后面“如何捐款”、“如何收集捐款”以及“众筹项目建议书”等章节。
脚本 根据尔格脚本白皮书（第6页）, 最简单的众筹脚本是“有关下列众筹情况的脚本：（持有主要出资人公钥的）项目出资人希望为（拥有要出资人公钥的）项目捐款，但前提是该项目在最后期限前从其他渠道筹集到足够的资金（至少达到融资下限）（以高度表示）。为了给项目捐款，出资人将创建一个受以下脚本保护的输出框。该脚本有两个条件：一种情况是最后期限已过，融资失败（出资人可以将钱要回来），另一种情况是成功实现融资（如果融资金额在最后期限前达到了所规定的最低融资门槛，那么项目就可以用这些钱）。
为了确保融到足够多的资金，脚本将在全部输出结果中搜索一个框，并且向项目公钥分配足够多的值。为了检查输出框值的去向，脚本将读取保护输出框的脚本，并且将其与proveDlog对应的脚本进行比较（项目公钥）；该脚本可以通过projectPubKey.propBytes获得。
由于目前API不支持嵌入自定义环境变量（只有诸如高度等预定义变量），因此编译脚本的唯一方法是用具体值替换白皮书中的这些变量。例如，想想看，如果一个众筹活动在第5万个区块前筹到500个尔格币，那么这次众筹就是成功的。 对于出资人公钥（backerPubKey）和项目公钥而言，我们可以采用目前只接受P2PK序列化钥匙的PK()函数。 如此，白皮书修订后的脚本如下：
{ val backerPubKey = PK(&amp;#34;9h7DHKSDgE4uvP8313GVGdsEg3AvdAWSSTG7XZsLwBfeth4aePG&amp;#34;) val projectPubKey = PK(&amp;#34;9gBSqNT9LH9WjvWbyqEvFirMbYp4nfGHnoWdceKGu45AKiya3Fq&amp;#34;) val deadline = 50000 val minToRaise = 500L * 1000000000 val fundraisingFailure = HEIGHT &amp;gt;= deadline &amp;amp;&amp;amp; backerPubKey val enoughRaised = {(outBox: Box) =&amp;gt;outBox.value &amp;gt;= minToRaise &amp;amp;&amp;amp; outBox.propositionBytes == projectPubKey.propBytes } val fundraisingSuccess = HEIGHT &amp;lt; deadline &amp;amp;&amp;amp; projectPubKey &amp;amp;&amp;amp; OUTPUTS.exists(enoughRaised) fundraisingFailure || fundraisingSuccess } 如何捐款 首先，JSON不支持多行字符串，因此需要用\n替换换行符。此外，引号将被转意，因此使用“而非”。生成的JSON将被发送到/script/p2sAddress。为了给项目捐款，首先要从/钱包/众多地址中获得你的地址，比如说，提取它们中的第一个。把地址输入出资人公钥，这样在这一步之后对/脚本/p2sAddress的请求看起来以下情况：</description>
    </item>
    
    <item>
      <title>尔格币($ERG) 将在Hotbit交易所挂牌交易</title>
      <link>https://ergoplatform.org/cn/news/2019_09_06/</link>
      <pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_09_06/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格币($ERG) 已经在Vgate交易所挂牌交易</title>
      <link>https://ergoplatform.org/cn/news/2019_08_20/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_08_20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>利用AMD卡开采尔格币</title>
      <link>https://ergoplatform.org/cn/blog/2019_08_07_amd/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_08_07_amd/</guid>
      <description>本教程将向你提供在Windows或Linux环境下利用AMD卡开采尔格币的所需信息.
开发者MH Samadani 在正式推出后第3天就发表其AMD矿工，并且之后还在不断对其进行更新。为了跟踪其最新动态，你可以加入尔格采矿电报群并且搜索 #amdminer。你可以在此查看矿机。
编码是基于OpenCL并且是完全开放源代码。如果你用的是Nvidia 卡，你可以在此找到CUDA矿机。
请注意，使用任何封闭源代码矿机是不安全的。尔格的开采特点要求你必须将你的密钥提供给矿机，以在任何脆弱数据面临危险之前确定谁值得信任！
以下是AMD卡的报告哈希率：
 rx570-8g: 22-24Mh/s rx580-8g: 23-25Mh/s rx Vega56: 24-26Mh/s  在进一步说明之前，我想对MH Samadani和主要开发人员Amin Moradi为矿工和同仁编写此教程的付出表示感谢！
现在让我们开始吧！
配置 将这些文件复制到相同的文件夹作为你的可执行文件，并且将你的种子字符串和节点地址添加到 config.json。除了在相同文件中设置keepPrehash: true 之外。
 Miningkernel.cl Prehashkernel.cl Ocldecs.h Ocldefs.h Libcurl.dll(在windows环境下) Config.json  对Linux的要求 1. 通过下载你来自amd.com特定Linux 发行版的AMDGPU-PRO 软件包来安装AMDGPU-PRO驱动器。打开该文件包，并且在终端窗口运行： $ amdgpu-pro-install --opencl=legacy,pal --headless 2. 安装OpenCL 头文件 $ apt install libcurl4-openssl-dev 3. 安装OpenSSL 1.02 $ apt install libssl-dev 对Windows的要求 1. 你需要至少一个AMD GPU，其驱动器安装了 amd.com 2. 从此处的 mhssadini’s github 下载与安装AMD APK 3. 如果没有现成的，利用含有可视化工作室工具链说明的源代码建造网络库libcurl 4.</description>
    </item>
    
    <item>
      <title>发布尔格主网3.0.6版本</title>
      <link>https://ergoplatform.org/cn/news/2019_08_06/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_08_06/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格地址</title>
      <link>https://ergoplatform.org/cn/blog/2019_07_24_ergo_address/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_07_24_ergo_address/</guid>
      <description>在今天的文章中，我们的将对尔格地址的格式化一窥究竟。除此之外，我们将说明他们具体的具体工作原理，以及什么使其优于其他类型的区块链地址。
让我们从头说起。
在你安装任何数字货币钱包的时候，你会自动创建一个地址。简单来说，这个钱包就好比一个传统银行账户，而地址就如同与之相匹配的账号。如果你需要把钱由甲打给乙、收款或者提走你的挖矿奖励，那么你就需要一个字母数字地址提取你的挖矿奖励。
如果你希望利用尔格钱包启动，并且想深入了解其功能，请双击以下链接.
那么，到底什么是地址呢？
地址是与某些脚本相对应的短字符串，并且用于保护一个币箱 （在此贴中，核心开发者kushti 在我们的论坛中发表文章详细解释了什么是币箱(“box”)。
与（十六进制编码）二进制脚本描述有所不同，尔格地址采用Base58编码，因此拥有一些二进制描述无法提供的非常有用的特性：
 地址的完整性可以轻易通过一体化校验和进行检查（根据维基百科的解释，其是“出于探测那些在传输与存储期间可能导入错误之目的，从一堆数字资料中得出的小型数据”）。 地址的前缀告诉你网络和地址的类型。尤其是网络前缀可以防止你误将主网代币发到测试网的地址。 地址使用一个编码（即：上面提到的 Base58），其可以避免长得很像的字符 ，并且方便双击以及在电子邮件中进行换行。 地址是编码网络类型、地址类型、校验和以及足以与特定脚本相对应的信息。  让我们看一下含有有关网络和地址类型信息的前缀字节：
可能的网络类型包括：
 主网 - 0x00 测试网 - 0x10  地址类型包括（下述语义学）：
 0x01 - Pay-to-PublicKey(P2PK) address 0x02 - Pay-to-Script-Hash(P2SH) 0x03 - Pay-to-Script(P2S)  对于地址类型，我们建立的内容字节如下：
 P2PK – 序列化（压缩）公钥 P2SH - 序列化脚本字节Blake2b256 哈希的前192个比特 P2S – 序列化脚本（这就是挖矿奖励的去处!）  举例来说，将10个尔格币发到P2PK 地址通常意味着对应的交易将包含一个币箱，在这个币箱中用P2PK地址中编码的公钥锁住10个尔格币。与此相类似， 如果是P2S地址，币箱将被地址中编码脚本锁住。如果是最复杂的P2SH脚本，币箱将获得特别预先确定脚本的保护，其将对脚本采用Blake2b256 哈希值前192个比特，在币箱支出时，应当会通过输入值显示。
以下是特定地址将如何看待测试网的例子：
 3 - P2PK (3WvsT2Gm4EpsM9Pg18PdY6XyhNNMqXDsvJTbbf6ihLvAmSb7u5RN) ? - P2SH (rbcrmKEYduUvADj9Ts3dSVSG27h54pgrq5fPuwB) ? - P2S (Ms7smJwLGbUAjuWQ)  以下是他们对我们主网的看法：</description>
    </item>
    
    <item>
      <title>发布尔格主网3.0.4版本</title>
      <link>https://ergoplatform.org/cn/news/2019_07_19/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>发布尔格主网3.0.3版本</title>
      <link>https://ergoplatform.org/cn/news/2019_07_18/</link>
      <pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格币已进入Magnum钱包</title>
      <link>https://ergoplatform.org/cn/news/2019_07_11/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_11/</guid>
      <description></description>
    </item>
    
    <item>
      <title>启动后的思路与尔格发展路线图</title>
      <link>https://ergoplatform.org/cn/blog/2019_07_09_after_launch/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_07_09_after_launch/</guid>
      <description>首先，我们感谢各位热心人士、开发者、矿工、社会各界以及我们的家人在尔格开发与启动过程中所给予我们的大力支持与无私帮助。尔格的启动为团队在过去几年的初始研发画上了句号，同时也开启了一个新的时代，核心技术大体定调，继续完善协议落实与基建项目将成为工作重点。
当前核心-尔格核心团队将全心致力于项目开发（至少，同时Foundation Treasury正在推进这方面的工作）。基于此，请允许我介绍一下当前项目的进展情况以及未来规划。
项目的当前进展状况 首先，关于尔格，我想提醒各位注意以下几点:
  其依然是一个相对保守的工作量证明区块链，其对尔格币的供应量会进行严格限制；这是一个类似于比特币的交易模式，在区块间精心挑选目标时滞等。从这种意义上来说，尔格币类似于比特币，并且时间已经证明这是对那些注重去中心化和币值稳定人的最佳选择。
  尽管其是一种（含有未花费的交易输出的）类似于比特币的交易模式，在不牺牲安全的前提下，尔格币支持强化合约货币可能性。我们已经拥有众筹、首次代币发行、冷钱包合约等几个例子。同时，尔格可以轻松获得基于普通离散对数的零知识证明，因此其对于在此基础上设计的协议来说会更好（在某些情况下，会是唯一的选择）。例如，现在每3个多签名中就有2个在网络上完成，该签名维持零知识（因此没有第三方观察员可以确定哪两方实际签署了交易的输入）。同样，环状签名（每N个签名中就有1个维持零知识）将免费提供。另外请看一下Ergomix, 这是一个(非互动性混合计划)[https://docs.ergoplatform.com/sigmastate_protocols.pdf]，并且可能是首个实用的非互动性混合建议。
  尔格对于常规代币提供原生支持。其还对可以信赖的认证数据结构提供支持（可信方在区块链以外对数据集进行的修订）或者不可信（根据合约规定在区块链上进行修订，然而只有非常小的数据集摘要被存储在未花费的交易输出（UTXO）集上）。
  其拥有抗池的(pool-resistant)和（在一定程度上）抗ASIC（ASIC-resistant）奥托吕克斯工作量证明计划，主要针对最高级图形处理器(GPUs)，性能最优的GPUs是8gb+ RAM.
  随着时间的推移，全节点数量可能会出现下降，为了更好地去中心化。尔格首次支持支持无国籍绝对安全客户。高效的轻钱包（SPV）客户支持也已经完成，但是这是采用(NIPoPoW技术)[https://nipopows.com/]，而非Grin所使用的FlyClient技术。
  没有必要对修改区块容量以及许多其他参数进行激烈辩论。仅拿区块容量为例，一名矿工只需在一个纪元（其由1,024个区块所构成）开始时进行投票就好，如果纪元内有超过50%的矿工支持修改（区块容量增加或者减少1%），那就会进行修改。对于协议的许多方面来说，如果超过90%的采矿权投票是针对软分叉的，那么软分叉更新就是可能的。（具有软分叉属性的）比特币和（具有动态瓦斯限值的）以太坊可以在一定程度上进行协议参数修改。然而，尔格币可以通过其矿工投票机制来对协议的许多方面进行修改与改进。
  目前所有这些特征或许还不太明显，因为其才启动一个星期，但是他们将从长期定义尔格币的独有特征。请注意，对于长期成功而言，你需要从第一原理开始，而尔格就是从第一原理开始的，而非仅仅是在技术方面（:请注意尔格在白皮书中第2章所记述明确定义的社会契约。
推进尔格核心团队的职责 尽管参考节点的实施工作还算大体顺利，然而即便对于熟练用户而言，其界面依然令人感到困惑，现在还没有诸如钱包、用于开发应用程序的框架等基础设施。因此核心团队将在未来几个月花时间创建所需框架，改进应用程序界面（API）以及支持钱包和交易所，其部分工作目前已经上马。另外请注意：目前节点的许多构成要素效率还不高，因此在可预计的将来，节点性能将会大幅提高。与此同时，外部团队将继续开展安全性审查。对协议设计和参考实施最关键部分的审计工作已经完成，其有时候是由几方协作完成的。
硬分叉政策 尔格正在努力避免硬分叉。发行（Emission）、工作量证明、交易模型基本原理以及其他核心问题绝对不应被修改，因为对设计核心部分的任何修改都意味着创建另一个区块链。但是，开发者可以在前12个月内提出硬分叉，当（且仅当）：
 硬分叉只是为了修补安全漏洞。唯一例外是通过矿工投票使部分特定指令的成本可调整，其是有计划的，但不是在目前主网上完成的。 硬分叉获得超过90%矿工支持的时候。 硬分叉没有违反旧的合约、冻结或者转移任何资金。  社区很重要！ 开发对于外部贡献者来说应当更透明与开放，尔格的开发应当逐渐转变为采用EPIPs （EPIP是指“尔格平台改进建议”）。任何拟议修改应当首先作为正式文件（EPIPS）提出，在正式实施之前可以对其进行讨论、辩论与修改。这相当于比特币和以太坊所分别采用的BIPs和EIPs。
尔格还需要一个与此相围绕的框架与应用生态系统。一部分资金将被用来奖励生态系统的开发者。奖励计划的详情将在稍后公布，然而，如果你有任何建议，可以立刻联系尔格核心团队。同时，团队非常欢迎各类建议以及所需的API改进想法等。鉴于团队对协议稳定性的承诺，从投资者的角度来看，相较于其他区块链，投资尔格以外的项目可能更有价值。
此外，请帮助宣传尔格币这个概念！我们是一个刚刚蹒跚学步处于萌芽阶段的区块链，正在寻找那些有志于参与文件起草、撰稿和其他材料的志同道合者。
尔格和尔格数据 首先，（几年前）曾宣布将会推出两个区块链 -尔格和尔格数据。它们的技术是相同的（或者非常类似），但是参数有所不同。尔格数据背后的主要思想是服务数据密集型应用需求，如：土地登记、证书名录等。
目前，尔格数据的计划还不明朗。只有在用户对其产生需求的时候才会启动该网络。此外，尔格数据最可能是尔格的一个侧链。同时其无论如何不会在短期内推出，只有当尔格打下完善的基础设施基础后方可能推出。尔格数据链一旦推出，在尔格币推出时，尔格元年代币（EFYT）的持有者将会获得尔格数据（ErgoData）代币。推出时的EFYT持有者速览(snapshot)已经完成。</description>
    </item>
    
    <item>
      <title>启动后的思路与尔格路线图</title>
      <link>https://ergoplatform.org/cn/news/2019_07_09/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_09/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格主网3.0.2发布</title>
      <link>https://ergoplatform.org/cn/news/2019_07_04/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_04/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格币提取说明</title>
      <link>https://ergoplatform.org/cn/news/2019_07_03/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_03/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格提取</title>
      <link>https://ergoplatform.org/cn/blog/2019_07_03_mining_withdrawal/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_07_03_mining_withdrawal/</guid>
      <description>花掉挖矿报酬 本文帮助矿工提取所挖到的资金。
许多人既发布节点，又担任拥有从内嵌于节点格式化矿机获得16进制公钥（pubkeyHex）的矿工。下面我来谈一谈如何认定所挖尔格币的数量以及如何将其提取到另一个地址。
关于密钥. 矿工可能遇到很多不同形式的密钥。
首先，挖矿软件以及节点中的采矿支持（即：格式化文件中的 ergo.node.miningPubKeyHex 设定） 正在采用16进制编码（Base16-encoded）“原”公钥，其仅为椭圆曲线中的一个编码序列点。该密钥对矿工来说已经足够用（其可能避免支持58进制的需要，地址构成的需要等）。
其次，节点钱包显示公钥付费（P2PK）地址，该地址以“9”开始。P2PK地址不仅包含椭圆曲线点，而且还包含网络前缀和校验和（checksum）， 类似于比特币的P2PK和P2PKH地址。
第三，还有minig/rewardAddress API方法，其主要是针对外部工具所产生的候选区块。此种API方法看起来有点像88dhgzEuTXaSfKEbxfa6vghvEGdBH39sn9h7As2Y2Z6SGd8bKXCXmRLY5JtU4g4RYBP4WcZWb3JwjXDK，其是以编码形式支付给矿工的特殊文字。
无论如何，如果你想把你矿机的16进制公钥（pubkeyHex）植入你的节点，完全没有问题，不用担心看到不同的密钥。
显示你的余额以及提款 如果你先挖出来尔格币然后才进行钱包初始化，因为你进行钱包初始化的区块高度比挖币的时候要高，那么或许你看不到你挖的尔格币。请注意：节点不会对区块进行反向扫描，在初始化后，其只扫描新的区块。因此，为了找到所开采的尔格币，目前需要对整个区块链进行重新扫描（或者，如果你开采，在另一台机器上发布另一个节点，或者在格式化文件中拥有不同端口设置的同一台机器上，即，给scorex.restApi.bindAddress 和scorex.network.bindAddress的域设定新的值； 另外请使用3.0.1版本，主要是因为其更便于格式化）。
为了把挖矿报酬花掉，你需要按照以下步骤进行操作： 1. 清除节点状态，如果你打算叫停工作节点。 为了清除你的节点的状态，你需要叫停节点，并且删除.ergo 目录下的全部内容（其可能藏在Mac和Linux你看不到的地方，尝试目录中的 ls -a 命令，你可以从此路径运行节点）。
2.从奥托吕克斯矿机使用的种子短语中恢复本地钱包 在你格式化你的奥托吕克斯矿机时，请记住你在config.json 设定的助记符句子 - 目前你需要从那儿恢复内置钱包。为了恢复你的钱包，再次启动节点，并且将POST请求发送给含有诸如
{ &amp;#34;pass&amp;#34;: &amp;#34;your_wallet_pass&amp;#34;, &amp;#34;mnemonic&amp;#34;: &amp;#34;mnemonic_sentense_from_your_miner&amp;#34;, &amp;#34;mnemonicPass&amp;#34;: &amp;#34;mnemonic_pass_if_set&amp;#34; } application/json 内容类型体的http://[your_node_ip]:9053/wallet/restore，
如果 pass 是一个将用于你本地盘加密钱包数据的一把新的特殊钥匙， 并且 mnemonic 是一个你可以从奥托吕克斯矿机格式化文件(config.json)复制的助记符短语。请特别注意 mnemonicPass 的域 – 这是你的助记符短语口令，其为可选项，并且你在创造你的助记符的时候可能已经对其进行格式化。只有当你的助记符真地需要钥匙，那么就在请求中增加此域，否则就删除此域。
不要忘记授权你的请求，设定对应 apiKeyHash正确的api_key HTTP 头字段， 在节点格式化文件中进行格式化。
注意：为了让钱包扫描来自创世的全部区块，你需要在你的节点已经开始下载全部区块前恢复钱包（请在/info API方法回应核对fullHeight - 尽管其是 null 你的节点尚未开始下载全部区块）。
3. 查询你的余额 当你的节点与网络实现同步的时候，请核对 /wallet/balances API方法。反馈应当类似于：
{ &amp;#34;height&amp;#34;: 3560, &amp;#34;balance&amp;#34;: 67500000000, &amp;#34;assets&amp;#34;: {} } 首先注意 height 域 – 其应等于通过 /info API路径的 fullHeight 显示值。balance 是你钱包所发现的一个确认余额。</description>
    </item>
    
    <item>
      <title>尔格币($ERG) 在Tidex交易所挂牌交易</title>
      <link>https://ergoplatform.org/cn/news/2019_07_02/</link>
      <pubDate>Tue, 02 Jul 2019 11:08:39 +0300</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_02/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格主网正式启动</title>
      <link>https://ergoplatform.org/cn/news/2019_07_01_1/</link>
      <pubDate>Mon, 01 Jul 2019 11:06:02 +0300</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_01_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>发布尔格浏览器</title>
      <link>https://ergoplatform.org/cn/news/2019_07_01_2/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_01_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格主网3.0.1发布</title>
      <link>https://ergoplatform.org/cn/news/2019_07_01/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_07_01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格会在P2PB2B 交易所上市</title>
      <link>https://ergoplatform.org/cn/news/2019_06_28/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_28/</guid>
      <description></description>
    </item>
    
    <item>
      <title>自启动伊始加入尔格主网</title>
      <link>https://ergoplatform.org/cn/blog/2019_06_28_mainnet-bootstrap/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_06_28_mainnet-bootstrap/</guid>
      <description>自启动伊始加入尔格主网 为了在启动伊始加入尔格主网并且竞相开采创世区块，你需要按照以下步骤进行操作。如果你不打算参与尔格挖矿，而只是想建一个全节点，那么你只需进行步骤3和步骤5的操作。
准备工作 1. 安装采矿软件 请先查阅https://github.com/ergoplatform/ergo/wiki/Mining的说明. 根据其（有关Ubuntu的）阅读说明或使用Windows手册https://ergoplatform.org/en/blog/2019_05_07_mining，搭建一个https://github.com/ergoplatform/Autolykos-GPU-miner矿机。 尝试运行诸如含有测试格式化的./auto.out config.json:
{ &amp;#34;mnemonic&amp;#34;: &amp;#34;noise peasant subway frozen illegal pretty oak agent train valid wash title burst column yard decide move coin gas asset pretty hire happy fuel&amp;#34;, &amp;#34;node&amp;#34;: &amp;#34;http://159.203.36.162:9052&amp;#34;, &amp;#34;keepPrehash&amp;#34;: true } 并且查看诸如以下内容：
2019-06-27 14:44:58,626 INFO [main thread] Using 1 GPU devices 2019-06-27 14:44:58,626 INFO [main thread] Using configuration file mine162.json 2019-06-27 14:44:58,628 INFO [main thread] Block getting URL: http://159.203.36.162:9052/mining/candidate 2019-06-27 14:44:58,628 INFO [main thread] Solution posting URL: http://159.</description>
    </item>
    
    <item>
      <title>发布“测试网2.2.0版(Testnet 2.2.0)”</title>
      <link>https://ergoplatform.org/cn/news/2019_06_27/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_27/</guid>
      <description></description>
    </item>
    
    <item>
      <title>主网启动 ： 周一，7月1日，上午10:00 UTC</title>
      <link>https://ergoplatform.org/cn/news/2019_06_26/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_26/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格采矿电报(Ergo Mining Telegram)群现已开放</title>
      <link>https://ergoplatform.org/cn/news/2019_06_24/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_24/</guid>
      <description></description>
    </item>
    
    <item>
      <title>EFTY（尔格元年代币）已经在Tidex挂牌上市</title>
      <link>https://ergoplatform.org/cn/news/2019_06_14/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_14/</guid>
      <description></description>
    </item>
    
    <item>
      <title>主网推出延后</title>
      <link>https://ergoplatform.org/cn/news/2019_06_13/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_13/</guid>
      <description></description>
    </item>
    
    <item>
      <title>具有尔格特征的坏加密播客(Bad Crypto Podcast)</title>
      <link>https://ergoplatform.org/cn/news/2019_06_13_2/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_13_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>发布测试网（Testnet） 2.1.2版</title>
      <link>https://ergoplatform.org/cn/news/2019_06_12/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_12/</guid>
      <description></description>
    </item>
    
    <item>
      <title>对为合约货币搭建框架名为“尔格”的平台所进行的访谈</title>
      <link>https://ergoplatform.org/cn/news/2019_06_11/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_11/</guid>
      <description></description>
    </item>
    
    <item>
      <title>与SWFT区块链的协议</title>
      <link>https://ergoplatform.org/cn/news/2019_06_05/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_05/</guid>
      <description></description>
    </item>
    
    <item>
      <title>发布测试网2.1.0版</title>
      <link>https://ergoplatform.org/cn/news/2019_06_05_3/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_05_3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>新的Bitcointalk线索</title>
      <link>https://ergoplatform.org/cn/news/2019_06_05_2/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019_06_05_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>钱包文件汇编</title>
      <link>https://ergoplatform.org/cn/blog/2019_06_04_wallet-documentation/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_06_04_wallet-documentation/</guid>
      <description>尔格节点提供内置钱包以便存放私钥及签署交易。以下内容将说明如何建立与保护阁下的尔格钱包。
该钱包将采用BIP39 标准从助记符句子中生出一颗种子，其将根据BIP32 标准用以创造一把私钥 （分层确定性钱包）。如果你愿意的话，你可以使用你自己的由那些词汇偏执狂常用词汇所构成的助记符句子。所允许的句子长度分别为12、15、18、21、24，分别代表128位、160位、192位、224位、256位安全。为了对这个有助记符的钱包进行初始化，你应当使用这个wallet/restoreAPI评估指标。然而，使用钱包所产生的助记符要安全得多。 在此阶段，与钱包的所有互动只能通过节点REST API完成。请确保你在进行下一步之前在你的节点上设置一把API密钥。
钱包格式化 通过节点格式化文件对钱包进行格式化。以下是在首次钱包格式化时需要注意的格式化参数：
 ergo.wallet.seedStrengthBits - 如果其由节点产生，那么需要注意种子位的长度。注意：种子越强大，那么助记符句子的长度就会越长。选择： 128, 160, 192, 224, 256 ergo.wallet.secretStorage.secretDir - 请注意将机密以加密形式存储的目录 ergo.wallet.mnemonicPhraseLanguage - ergo.wallet.mnemonicPhraseLanguage – 请注意在助记符句子中将使用的语言。选择：&amp;quot;chinese_simplified&amp;quot;, &amp;quot;chinese_traditional&amp;quot;, &amp;quot;english&amp;quot;, &amp;quot;french&amp;quot;, &amp;quot;italian&amp;quot;, &amp;quot;japanese&amp;quot;, &amp;quot;korean&amp;quot;, &amp;quot;spanish&amp;quot;（ &amp;quot;简体中文&amp;quot;、&amp;quot;繁体中文&amp;quot;、&amp;quot;英文&amp;quot;、&amp;quot;法文&amp;quot;、&amp;quot;意大利文&amp;quot;、&amp;quot;日文&amp;quot;、&amp;quot;韩文&amp;quot;、&amp;quot;西班牙文&amp;quot;）  首次使用钱包 在首次运转节点的时候，需要通过REST API对钱包进行初始化。可以有两种选择：
  通过向含有数据body: {&amp;quot;pass&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;mnemonicPass&amp;quot;: &amp;quot;abc&amp;quot;}的/wallet/init 提出POST请求，从头开始进行初始化（种子将通过节点产生）。不要忘记存储节点对应的助记符短语。（备注：请求主题中的参数 mnemonicPass 是可选项，并且可以用来保护助记符短语）。
  从现有的种子中恢复钱包。你需要提供你的助记符短语：什么时候使用这一选项。这可以通过向含有数据body: {&amp;quot;pass&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;mnemonic&amp;quot;: &amp;quot;abandon abandon ...&amp;quot;, &amp;quot;mnemonicPass&amp;quot;: &amp;quot;abc&amp;quot;}提出 POST请求得以完成。（注意：只有当你的助记符短语在创建时被其他密码保护起来，才会需要mnemonicPass 字段）。
  钱包开锁 在初始化后以及每次使用钱包前需要向含有数据body: {&amp;quot;pass&amp;quot;: &amp;quot;123&amp;quot;}的/wallet/unlock 提出 POST请求来进行解锁。（备注：在初始化阶段使用你已经选定的密码） 在每次节点重启或者钱包上锁的情况下，你必须走这一步。尤其是为了进行下列操作，钱包必须先解锁：</description>
    </item>
    
    <item>
      <title>一个去信任的本地交易所交易系统</title>
      <link>https://ergoplatform.org/cn/blog/2019_05_29-exchange/</link>
      <pubDate>Wed, 29 May 2019 18:21:23 +0300</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_05_29-exchange/</guid>
      <description>本地交易所交易系统（LETS）旨在发展当地经济，并且通常由在彼此附近的当地人使用。 在此链接中描述了一个管理LETS的委员会。 我们将此类系统称为管理或许可，因为它取决于受信任的委员会。 在这里，我们描述了一个去信任的LETS系统，即没有管理委员会的系统。
概要 LETS涉及多个同意使用某种形式的“本地货币”的党派，通常以1：1的比率与该国的主要货币挂钩。假设我们的LETS位于欧洲国家，货币为欧元，交换以“当地欧元”进行，被认为相当于国家欧元。
LETS中的每个用户都有一个帐户，其中包含该用户的LETS余额（以本地欧元为单位）。在加入时，每个用户的余额为零。余额存储在（可能是去中心化的）分类帐中。 LETS的一个有趣特征是零余额的用户也可以“提款”，但仅用于支付另一个LETS用户。在任何时候，所有用户的LETS余额总和为零。
例如，零余额的Alice希望从Bob那里以2欧元购买一升牛奶，Bob也是零余额的LETS成员。她将2欧元从她的账户转到Bob&#39;s，她的余额为-2，Bob为+2。然后，Bob可以将他的部分或全部余额转移给另一个LETS用户，以换取商品或服务。
去信任的LETS 由于我们希望获得去信任的LETS，因此我们不能依赖任何受信任的群体来接纳用户。我们只假设又一个有信任的预言机（oracle）由一些全球账号和一个包含这个账号的一个代币的单例币箱标识。此币箱还包含在任何给定时间段内尔格币与欧元的比率。通过使用此币箱并使用新费率创建另一个单例币箱来更新费率。
在任何情况下，我们的LETS由包含一些LETS成员资格代币的全局LETS币箱来定义。此币箱受以下脚本保护。代币账号唯一地定义了所使用的LETS的属性，例如位置，货币单位，费率预言机（oracle）账号等。一个或多个用户可以花费该币箱并创建他们各自的LETS币箱作为交易的输出。该币箱最初以例如10000 LETS会员代币开始。
一个LETS币箱表示一个LETS成员，必须用于LETS交易。 LETS交易发生在两个LETS成员之间，一个是发送者而另一个是接收者，这样发送者将一些正数量的LETS货币（本地欧元）转移给接收者。这样的交易消耗成员的币箱并将其重新创建为具有更新余额的输出。
基本变体 为了防止垃圾信息和分布式拒绝服务攻击，我们要求至少将一些最小数量的尔格币(minErgsToJoin)锁定在新创建的成员的币箱中。 尔格币将被锁定，直到至少minWithdrawTime数量的区块被挖掘为止。 允许一个币箱的LETS余额为负值，直至锁定的尔格币可以覆盖的金额（使用交易时的汇率）。
// 一个币箱存储会员的代币 val tokenBox = OUTPUTS(0) // first output contains remaining LETS tokens def isLets(b:Box) = { // 一个LETS 币箱必须在代币中有正好一个会员资格代币(0)  b.tokens(0)._1 == letsTokenID &amp;amp;&amp;amp; b.tokens(0)._2 == 1 &amp;amp;&amp;amp; blake2b256(b.propositionBytes) == memberBoxScriptHash &amp;amp;&amp;amp; SELF.R4[Long].get == 0 &amp;amp;&amp;amp; // 从0 LETS结余中开始一个币箱  b.value &amp;gt;= minErgsToJoin &amp;amp;&amp;amp; // 币箱必须包含一些最小数量的尔格币  b.R6[Long].get &amp;lt;= HEIGHT // 将创建高度存储在R6中 } // 在tx中创建了多少lets币箱 val numLetsBoxes = OUTPUTS.</description>
    </item>
    
    <item>
      <title>尔格发行计划</title>
      <link>https://ergoplatform.org/cn/blog/2019_05_20-curve/</link>
      <pubDate>Mon, 20 May 2019 15:05:06 +0300</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_05_20-curve/</guid>
      <description>概要 尔格的原生代币称为尔格币，平台的用户和矿工对其发行时间表可能非常感兴趣。尔格币也有一些独特的特征，在这篇文章中将重点展现。最基本的并且省略技术细节的特征是：尔格有严格的供应量限制，8年的发行计划、以及8年来不断下降的的发行率。所有尔格币都通过原始的专用集成电路（Asic）和池阻工作量证明（“PoW”）算法称为奥托吕科斯（Autolykos），来进行挖掘。因此，在主网启动时存在0个尔格币，因为没有首次币发行也没有预挖。在8年结束时，最终的尔格币供应将是97,739,925个尔格币。尔格区块间距为2分钟，前两年每个区块将释放总共75个尔格币，供矿工和金库共享（下文讨论的金库）。但从第2年开始，发行率将下降3.0 个尔格币，然后每3个月进一步下降3.0个尔格币，这将导致在发行8年后结束发行。不会有额外的通货膨胀，而且尔格币基础货币将保持不变。下面的发行图说明了这一点。
尔格金库 为了资助开发，推广，活动，将尔格的“尔格元年代币”（“EFYT”，Ergo First Year Token下文进一步讨论）交换为尔格币并为可能推进该平台的其他活动提供资金，尔格已经建立了一个金库，将获得尔格币总发行量的4.43％。在主网发布后的前两年，金库每个区块将获得7.5个尔格币。鉴于每个区块的区块奖励总计为75个尔格币，金库的尔格币分配相当于前两年总区块奖励的10％，并且矿工的区块奖励为每区块67.5个尔格币。 2年后，金库将继续获得超过67.5个尔格币的部分奖励，但是，当区块奖励达到每个区块66个尔格币时，2年半之后将变为0。熟悉其他一些带有金库的工作量证明协议的读者，如ZCash，可能会发现与之类似，但应该注意的是进入金库的尔格币总数仅为4,330,791.5，占总货币金额的4.43％，并在短短2年半完成。这与ZCash的金库相比，后者是ZCash总货币金额的10％和前4年所有ZCash币的20％。希望在主网发布一年后，尔格将通过多元化的开发商，矿工和用户群实现高水平的去中心化。第一年，金库将用于在尔格币的Waves（波）平台上交换尔格元年代币（EFYT）。在剩余的1年半内，将建立一个社区投票机制，以确定金库的资金支出情况。
尔格发行图表和代码 发行计划的代码可以从此处获得
尔格元年代币（“EFYT”Ergo First Year Token） 2年前，即2017年5月，从10万个“尔格元年代币”（“EFYT”）空投开始，尔格元年代币在Waves DEX上进行了空投和分发。尔格元年代币有助于建立尔格利益相关者和爱好者的早期社区以及筹集少量资金的双重目的。该平台在发布之前用于资助开发，推广等。尔格元年代币严格来说是一个Waves代币，与尔格币不同，尔格币是在尔格主网发布后挖掘的尔格主网本地代币。
尔格元年代币将与主网发布后的前1年内开采的尔格币的一小部分进行交换。执行交换的计划机制首先是，将在Waves上为尔格的主网代币尔格币建立一个新的支付网关。有关Waves支付网关的更多信息，请点击此处。在建立网关后，当尔格金库从挖矿奖励中收到尔格币时，金库将通过网关将这些尔格币存入Waves，此时，金库将以1.00 尔格币/1.00EFYT的固定价格在市场上出价。尔格元年代币的所有者可以将他们的尔格元年代币交换为尔格币，并按照他们的意愿与他们的包含保存在Waves的尔格币进行交换，在Waves上交易或通过网关将他们的尔格币从Waves转移到他们自己的钱包以便在其他地方使用。在这个过程中由金库购买的所有尔格元年代币都将被烧掉。
尔格元年代币的当前分发情况可以在这里找到。值得注意的是，尔格元年代币的最大供应量为1,970,945.0。这是尔格代币发行第一年的10％和金库将获得的尔格币数量相同，这意 味着 金库将在第1年收到1,970,945.0个尔格币，足以将尔格元年代币的最大供应量交换为尔格币。
尔格如何在短短8年内发行整个尔格币供应，而其他工作量证明区块链的发行时间表更长？ 除了尔格之外，很少有（如果有的话）工作量证明协议仅有8年之短的发行时间表，尔格之所以能做到的原因是值得一提的。首先，简单地和一些突出的工作量证明和最近发布的工作量证明代币作比较，尔格币供应量在8年后完成100％发行，无长尾发行，而以下代币的发行是这样的：
 比特币在8年后发行约75％，随后长尾发行; ZCash和Ravencoin遵循与比特币相同的发行计划; Beam将在8年后发行75％并具有长尾发行; Grin通胀无限期延长。  尔格的短发行计划是通过其新的经济模式实现的，即其协议的存储租用费特征。矿工将有一个额外的收入来源，这里有一篇相关论文。总而言之，矿工能够从未使用的币箱（类似于比特币中的UTXO）中每隔4年扣除一次在尔格币中计算的存储租用费，以换取将这种币箱保持在高成本记忆中的状态。因此，即使在没有区块奖励补贴的情况下，矿工也会受到高度激励以确保网络安全，这将导致更稳定的挖矿奖励，而不仅仅依靠矿工也能获得的交易费用。拥有存储租用费的其他好处包括防止“状态膨胀”、建立一个状态周边的经济（用户必须付钱以保持矿工记忆中未用完的币箱）以及任何丢失的硬币逐渐返回循环。请注意，在尔格生态中，矿工可以使用在线投票来逐步更改许多关键参数，包括存储租用费、区块大小和区块的最大计算成本。</description>
    </item>
    
    <item>
      <title>尔格白皮书</title>
      <link>https://ergoplatform.org/cn/news/2019-05-15-whitepaper/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-05-15-whitepaper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>主链延迟发布</title>
      <link>https://ergoplatform.org/cn/news/2019-05-07-release/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-05-07-release/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何在Windows（x64）系统下挖掘尔格</title>
      <link>https://ergoplatform.org/cn/blog/2019_05_07_mining/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_05_07_mining/</guid>
      <description>第1步：工具 Visual Studio(可视化工作室)
选择免费的社区版本，您需要在安装期间选择使用C ++包进行桌面开发。
CUDA工具包 选择您的系统版本，使用默认选项安装，它会将您的图形驱动程序更新为兼容版本。
Curl
没有SSL的通用版本，二进制不会工作。 选择通用源，压缩文件并单击显示镜像。下载并解压缩。
OpenSSL 1.0.2
下载并安装。
Autolykos GPU矿工
单击克隆或下载，并下载压缩文件并解压缩。
第2步：构建libcurl 打开命令行，转到 c:\Program Files (x86)\Microsoft Visual Studio\2017\Community\vc\Auxiliary\Build\ 并运行此脚本： vcvarsall.bat x64
打开命令行，转到解压缩的Curl目录，然后进入winbuild文件夹并运行此命令： nmake /f Makefile.vc mode=dll MACHINE=x64
成功构建后，转到Curl目录， \curl\builds\libcurl-vc-x64-release-dll-ipv6-sspi-winssl\bin 并将 libcurl.dll 复制到 \Autolykos\secp256k1 目录。
第3步：建立矿工 打开命令行，转到 c:\Program Files (x86)\Microsoft Visual Studio\2017\Community\vc\Auxiliary\Build\ 并运行此脚本： vcvars64.bat
打开命令行并转到解压缩的奥托吕科斯图形处理器矿工（Autolykos GPU miner）目录，然后进入 secp256k1文件夹 并编辑 winbuild.cmd 文件，将 OPENSSL_DIR, LIBCURL_DIR 更改为OpenSSL和Curl主目录。 您可以将 CUDA_COMPUTE_ARCH 更改为所需的图形处理器代码体系结构。
运行 winbuild.cmd 并构建你的矿工。 成功构建后，您应该能在同一目录中发现miner.exe。
S第4步：挖掘 在挖掘之前，您必须配置您的节点，钱包和矿工 
同步节点后，配置并解锁钱包，您必须在 \Autolykos\secp256k1 目录中，创建挖掘配置文件 config.</description>
    </item>
    
    <item>
      <title>尔格简介</title>
      <link>https://ergoplatform.org/cn/news/2019-04-24-teaser/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-04-24-teaser/</guid>
      <description></description>
    </item>
    
    <item>
      <title>尔格之上的本地交易所交易系统</title>
      <link>https://ergoplatform.org/cn/blog/2019_04_22-lets/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_04_22-lets/</guid>
      <description>本地交易所交易系统（LETS）是一个本地相互信用协会，允许成员单独创建共同信用资金，系统中的所有交易都写入共同的分类账。例如，假设拥有零余额的Alice愿意从Bob购买一升生鲜奶。首先，他们就价格达成一致，例如，假设价格约为2欧元（Alice和Bob居住在爱尔兰）。交易被写入分类账后，Alice的余额变为-2（减去2）欧元，Bob的余额变为2欧元。然后Bob可能会花费2欧元来购买Charlie的自制啤酒。通常，这种制度对负余额施加限制，有时甚至对正余额施加限制，以促进社区交易。
从历史上看，这种系统在危机时期变得流行起来。第一个系统是迈克尔林顿于1981年在加拿大陷入萧条时的城镇建立的。1998-2002年阿根廷大萧条期间，当地的交易所交易系统非常受欢迎。大多数LETS团体的成员从50到250人不等，由核心委员会维护纸质信用票据和分类账。然而，基于纸张的LETS货币已经出现了一些问题，例如伪造票据，系统管理员可能的流氓行为等等。因此，基于区块链的LETS可能优于旧系统。有关LETS的更多信息可以在“货币生态”(The Ecology of Money”)一书(作者RichardDouthwaite) 和维基百科中找到。
在本文中，我们将展示如何在尔格之上实现LETS。据我们所知，这是区块链上首次执行这种社区货币。我们的参考执行很简单，包括两个合同，即管理合同和交易合同。我们跳过尔格初步行动，所以请起步者阅读 首次币发行文章和ErgoScript教程(基础和 高级)。不过，我们将在以下句子中介绍几个新术语。如果发出的代币数量等于1，我们将其称为单例代币。类似地，包含单例代币的币箱称为单例币箱。
管理合约控制一个单例币箱，该币箱容纳LETS系统的会员。合约允许以每笔交易一个会员的速度添加新会员。该币箱不存储会员，而是仅构建在会员目录之上的经过验证的数据结构的小摘要。会员与在交易中发出的单例代币相关联，该交易将会员添加到目录中。该交易创建一个新会员的币箱，其中包含会员的单例代币。会员的盒子受交换合同的保护。此外，新创建会员币箱的初始余额写入R4寄存器，在我们的示例中余额等于零。创建新会员的交易必须提供目录转换的正确性证明。
管理合约币箱通常由委员会控制，委员会随着时间的推移而发展。为了支持这一点，我们允许委员会逻辑驻留在寄存器R5中。例如，假设已添加新的委员会会员以及新的LETS会员，输入管理合约币箱需要2/3个签名，输出币箱需要3/4个签名。在这种情况下，输入和输出币箱中R5寄存器的内容会有所不同。
下面提供了尔格脚本中带有注释的管理合约代码。请注意“userContractHash”（用户合约哈希）是关于交易合约哈希。
val selfOut = OUTPUTS(0) // 管理脚本  val managementScript = selfOut.R5[SigmaProp].get // 管理脚本模板正在自我复制，并且管理脚本已被满足  val scriptCorrect = (selfOut.propositionBytes == SELF.propositionBytes) &amp;amp;&amp;amp; managementScript // 支出交易正在为目录，用户，费用创建币箱。  val outsSizeCorrect = OUTPUTS.size == 3 // 检查管理标签代币是否正在自我复制  val outTokenCorrect = (selfOut.tokens.size == 1) &amp;amp;&amp;amp; (selfOut.tokens(0)._1 == letsToken) // 检查新代币是否发行，其数量是否正确  // OUTPUTS(0) 已经通过outtokenCorrect检查了代币  val issuedTokenId = INPUTS(0).id val userOut = OUTPUTS(1) val correctTokenAmounts = (userOut.</description>
    </item>
    
    <item>
      <title>一个尔格顶层的首次币发行案例</title>
      <link>https://ergoplatform.org/cn/blog/2019_04_10-ico-example/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_04_10-ico-example/</guid>
      <description>本文介绍了在尔格脚本中执行的功能齐全的ICO（首次币发行）。该案例涵盖了尔格平台的几个重要和新颖的特征，并展示了如何使用少量代码来支持复杂的合约。
第1部分。初步行动 加密货币协议中的一个重要设计决策是指定支出交易实际花费的内容。这里有两种可能性。第一个基于UTXO(未花费的交易输出）的模型，如在比特币中，交易花费一次性资产容器（在比特币中称为&#39;硬币&#39;或UTXO）并创建新的。另一种是基于账户的模型，如在Nxt，以太坊或Waves中，交易将一定数量的资产从现有长存的账户转移到另一个，可能是新的长存的账户，这后续可能产生副作用，例如Waves或以太坊中的合同执行。在这方面，尔格类似于比特币，因为它使用基于UTXO的方法，其中一次性容器被称为币箱。有趣的是，尔格交易还可以有未被花费的数据输入，而是用于从当前未使用的币箱来提供一些信息。
在基于UTXO的模型之上创建首次币发行并非易事，因为与基于帐户的模型相比，此处没有明确的持久存储。但是，尔格将支出交易带入脚本的执行上下文中。通过这种小的改变，可以表达交易输出和输入之间的依赖关系。反过来，通过设置依赖关系，我们甚至可以在区块链上执行任意复杂的图灵完备程序（参见&amp;ldquo;自我复制硬币作为通用图灵机&amp;rdquo;论文）。在本文中，我们将使用ICO定义多阶段合同的具体方案，其中我们有三个阶段（融资，代币发行，退出）。
现在想象一下成千上万参与者的ICO。与以太坊不同，尔格不提供存储大量数据的可能性，并且在整个合同执行过程中都可以存储它们。相反，它允许仅存储数据结构的大约40字节的头，表示为键 - &amp;gt;值字典，与默克尔树类似地进行验证。要访问字典中的某些元素或对其进行修改，触发保护脚本执行的支出交易应提供查找或修改证明。这为合同提供了对潜在巨大数据集进行验证的可能性，而无需太多内存来存储合约状态。但是，在（活动合约）状态下存储空间意味着更大的交易，但从可扩展性的角度来看，这个问题更容易，并且可扩展性是尔格的首要任务。
第2部分.首次币发行（ICO）合同 可能存在许多与首次币发行（ICO）相关的可能情景。在本文中，我们考虑一个首次币发行想要收集至少一定数量的资金（尔格币）来启动项目。一旦超过资金门槛并且资金期结束，该项目就会启动，并且项目将根据所收集的资金总额发放首次币发行的代币。在永久延续的退出阶段，投资者根据他们在融资期间投入的金额撤回首次币发行的代币。下面简要介绍合约步骤，并进一步提供详细信息：
 首先，融资期开始。它从一个项目币箱开始，对一个空字典进行验证。该词典用于持有（投资者，平衡）对，其中投资者是保护包含退出代币的币箱的脚本。为了平衡，我们假设在ICO期间1个代币等于1个尔格。在融资期，只有将尔格币放入项目的框中才有可能。资金交易花费在项目的框中，并创建一个包含更新信息的新项目框。为此，项目币箱的支出交易还有使投资者撤回脚本的其他输入。应将投资者脚本和输入值添加到新币箱的树中。这将会有许多链式资金交易。 其次，融资期结束，之后持有投资者数据的树变为只读。经过验证的树可以单独允许不同的修改操作：可以禁止插入，删除，更新或所有操作（因此树可以处于只读模式）。此外，此交易还会创建首次币发行项目的代币，该项目将在下一阶段退出。该项目可以在此阶段撤回尔格币。 第三，投资者撤回他们的首次发行币代币。为此，支出交易创建具有保护条件的输出和从树中获取的标记值。撤回的对也从树中清除。可能会有许多链式支出交易。  这三个阶段应按逻辑顺序链接在一起。使用一系列币箱来实现这些目标。
第3部分.首次币发行合约细节 下面提供ICO合约阶段的细节和尔格脚本代码。
融资阶段 在先期的融资阶段，我们假设最初项目创建了一个提交到空字典（存储在寄存器R5中）的币箱，其中包含下面描述的一些保护脚本。这个阶段至少持续到2,000高度。更具体地说，高度为2,000或更高的第一个交易应该更改输出币箱的脚本，如下一节所述（较低高度的交易必须输出具有相同脚本的币箱）。
项目币箱检查它是否始终是交易的第一个输入和输出。 其他输入被视为投资者的输入。 投资者的输入包含寄存器R4中的脚本的哈希。 此哈希表示将在稍后的退出阶段使用的退出脚本。 应将所有投资输入的哈希值和货币值添加到字典中。 支出交易提供了证明投资者数据确实被添加到字典中的证据，并且在合同中检查证明。
在资助分包合约中没有检查字典是否只允许插入，而不是更新现有值或删除（尽管添加显式检查并不困难）。
支出交易应该支付费用，否则，它不太可能包含在一个区块中。因此，资助合同检查支出交易有两个输出（一个用于自身，另一个用于支付费用），费用不超过一定限度（在我们的例子中只有一个纳米），并且保护命题应该是这样只有矿工可以花费输出（在我们的例子中，我们只使用来自编译环境的变量“feeProp”而不提供任何细节）。这个“feeProp”对应于一个标准，虽然不是协议所要求的。
下面的代码强制执行上述条件。请注意，“nextStageScriptHash”（下一步脚本哈希）环境变量包含颁发阶段序列化脚本的哈希值。
val selfIndexIsZero = INPUTS(0).id == SELF.id val proof = getVar[Coll[Byte]](1).get val inputsCount = INPUTS.size val toAdd: Coll[(Coll[Byte], Coll[Byte])] = INPUTS.slice(1, inputsCount).map({ (b: Box) =&amp;gt; val pk = b.R4[Coll[Byte]].get val value = longToByteArray(b.value) (pk, value) }) val modifiedTree = SELF.R5[AvlTree].get.insert(toAdd, proof).get val expectedTree = OUTPUTS(0).</description>
    </item>
    
    <item>
      <title>如何进行Ergo挖矿</title>
      <link>https://ergoplatform.org/cn/blog/2019_04_03_mining/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_04_03_mining/</guid>
      <description>概况介绍 挖矿，是指在Ergo区块链上进行一系列资源密集的计算来加入新区块的过程。
Ergo挖矿基于Autolykos, 一个旨在抵抗ASIC超级矿机和矿池的工作量证明（PoW）算法。矿工们要进行内存硬计算（至少需要2GB内存，4-8GB的RAM是目前效率最高的配置）因此Ergo对于GPU挖矿十分友好。此外，Autolykos需要接入私钥，由此防止挖矿池的形成。一旦找到正确的算法，矿工即可散播他的区块（连同算法一起散播），在720个区块后拿到他相应的奖励。余下全网将用该矿工的公钥对该算法进行验证，验证的过程需要较少的内存千字节，效率相当高。
如何进行Ergo挖矿 Ergo挖矿需要一个配置并同步过的Ergo节点，还有至少一个GPU，来完成实际的PoW计算。当然了，你可以用多个GPU倍增哈希算力，但你仅需一个Ergo节点。
设置全节点 全节点设置可参见上一个章节（教程一：如何设置全节点）。要支持一个外部矿工，也就是我们会用到的，你的配置文件里要有以下设置：
ergo.node.mining = true ergo.node.useExternalMiner = true 如果你已经有了私钥/公钥对，你可以在节点配置里指定公钥或地址：
ergo.node.miningPubKeyHex = &amp;#34;11aa ... FF&amp;#34; 如果这个参数没出现，节点会采用内置钱包里第一个公钥来为外部矿工生成区块。
只要节点同步完成，你就完成挖矿的准备工作了。
设置矿工 警告！ ⚠️ 由于Autolykos要用到私钥，切勿切勿使用非受信任的挖矿软件。一定要检查软件是否开源，是否已被社区认可，这非常重要！
从以下挖矿软件里安装你的软件：
 CUDA miner (Nvidia GPU only)  挖矿配置文件如下：
{ &amp;#34;seed&amp;#34;: &amp;#34;注意！！！ 将此替换为您的助记句并保密，否则您将被抢劫&amp;#34;, &amp;#34;node&amp;#34;: &amp;#34;http://188.166.89.71:9052&amp;#34;,&amp;#34;keepPrehash&amp;#34;: false } 定义：
 种子 是节点配置里的助记句，或是该设置里能为miningPubKeyHex计算私钥的助记句 节点 是您的节点API端口的URL 保留预哈希（keep Prehash）是一个优化参数。如果设定成 true, 矿工会消耗最多8GB内存。如果设定成 false 矿工会消耗最大4GB内存，但其表现也会打25%左右折扣。  现在，用矿机运行指令 ./auto.out config.json (用Linux)，尽情享受区块奖励吧！</description>
    </item>
    
    <item>
      <title>尔格挖矿教程</title>
      <link>https://ergoplatform.org/cn/news/2019-04-03-ergo-mining-tutorial/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-04-03-ergo-mining-tutorial/</guid>
      <description></description>
    </item>
    
    <item>
      <title>测试链2.0.3发布</title>
      <link>https://ergoplatform.org/cn/news/2019-04-02-testnet-2.0.3/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-04-02-testnet-2.0.3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Alex Chepurnoy 和Dmitry Meshkov的问答</title>
      <link>https://ergoplatform.org/cn/blog/2019_03_19-qa/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_03_19-qa/</guid>
      <description>首先，我们有一个重要的公告—如果在审计过程中没有发现安全漏洞，计划于5月26日发布尔格主网！
关于扩展和应用的愿景是什么？ 关于扩展，主要方法是在不影响功能的情况下避免膨胀。例如。持久可更新存储是可能的，更新由区块链合约检查，但只有验证了的数据结构的摘要（以及一些额外的字节，少于40个字节）存储在UTXO集，这与数据集的大小无关。存储租金有助于清除UTXO设备上的灰尘。轻量客户端：在尔格中，如果你不使用，你可以在不存储UTXO设置的情况下获得全节点保证。这大大改善了boostrapping（机器学习算法）和区块验证时间。通过这些改进，可以在不影响经典区块链假设和保证的情况下提高TPS（透明页共享）。但是你想要具体数字吗？我没有具体数字，因为区块大小等参数不是一成不变的，而是矿工可以调整它们。因此，如果矿工正在经历低的完整区块验证时间（硬件随着时间的推移而变得越来越好，软件也是），他可能会建议或投票来增加区块大小。
关于应用，我们希望有人追随：1。人们重视系统及其用户之间的社会契约。例如。人们对以太坊分叉不满意。尔格不会有硬件更新功能，而社区可以在很多方面升级协议。 2.由于（1）至少，同时也有限的供应，尔格将作为储值资产（如果您只是在系统中存储硬币，滞期费用很少）。3.需要安全，简单和高效的金融应用的人员。尔格的智能货币概念比以太坊的智能合约简单得多，同时功能强大，足以满足那些没有特定技术开发固态合约的人们的大多数金融应用，或大量资金来雇用熟练的开发人员。 4.还没准备好预测大公司的任何事情，但有些企业已表示有兴趣在尔格之上做一些代币和合约。我们会尽早宣布任何相关事宜。
有没有示例或用例？ 我们有很多示例，合约：预言机（oracles），众筹，原子交叉链和单链（代币到代币）交换，混合等。 开发人员的尔格脚本教程涵盖了基础信息。
一个包含更复杂示例的文件（冷钱包，混合，石头剪刀布游戏）即将发布。此外，我们将展示首次币发行场景和LETS系统的示例。 另请参阅&amp;ldquo;为大众提供智能合约&amp;rdquo;博文中的目标小额信贷合约示例。
您是否有意建立像闪电网络这样的本地链下解决方案？您对社区驱动方案的看法是什么？ 是的，我们希望它们会在某个时刻出现。我们现在的目标是提供尽可能灵活的协议，使其实现变得容易。最重要的是，我们已经有社区成员在尔格之上执行侧链，但这项工作还处于早期阶段。我们支持社区的任何活动，包括侧链。
哪个区块链项目与尔格类似？ 在某些方面，比特币（软分叉，但我们会更进一步），Coda（如果它是真实的，我仍需检查;轻量客户端），Grin（FlyClient类似于PoPoWs），ZCash（Equihash是类似于我们的工作量证明，但我们的参数更严格，我们的工作量证明是池阻的）。不能像我们的语言一样命名任何其他项目！所以，总的来说，尔格非常独特。
什么是尔格数据以及它的实际用例是什么？ 主网将在多久之后执行？ 尔格数据计划成为一个具有相同技术的区块链，但不同的参数可满足面向数据的应用需求。现在我们完全专注于在其上推出单链和应用。我认为尔格数据可能会在2到3年后出现，如果需要这样的应用，并且还可能又基于尔格之上的应用限制（特别是数据密集型）。按说，将会有一个侧链。现在这个领域已经有很好的进展，所以到那时我们可能会有无条件好的侧链。
什么时候开始挖矿？我们可以用cpu挖矿吗？ 当然，您现在可以开始使用CPU进行挖掘。只需使用mining = true config settings设置一个完整节点（查看本指南），您的节点将在初始同步后开始挖矿。可以在此处找到示例配置
但是我们还没有上主网呢？所以我们只能挖掘测试网硬币？ 是的，你现在只能挖掘测试网硬币。 GPU 矿工绝对可以在主网之前使用（可能是本周或下周）。
是否有关于如何设置钱包的手册？ 钱包是在主网发布之前应该更新的另一件事，我们会就它的安全设置等提出建议。现在，您只能在设置帖子的配置文件部分2中将助记词设置为纯文本
运行节点的最低要求是什么？ 这一切都取决于你的节点制度。我们没有精确测量它，我们用4 Gb内存，2个CPU，80 Gb SSD驱动上打开我们的全部节点，但它就像推荐的配置，而不是最小的配置。
您是否计划与其他平台合作（例如Waves）？哪一种？ 我们计划在Waves DEX上市（这将大大简化EFYT / 尔格币互换），没有计划与平台的其他合作。
您有计划增加一个选择来生成类似ERC721的代币吗？无法拆分的令牌。 您可以免费为每个交易发行一个代币，因此发行大量代币（最大供应量为1）不是问题。没有标准可以将它们组合成一类相似的代币（没有标准的方法来检查，标记aa &amp;hellip; aa与标记aa...bb具有相同类别的代币），但可能在将来会出现这样的标准。
是否可以同时播报一批交易？理想情况下，它们包含在同一区块中。 没有API方法可以同时播报批量交易，但没有什么可以阻止您逐个广播它们而没有延迟。因此，同时播报尽可能多的交易不应该是一个问题。理想情况下，它们应包含在同一个区块中 - 可以编写某种合约，确保一些交易包含在一个单一的交易中阻止（或者没有包括它们）但是，我们还没有尝试过。此外，这可能需要矿工具有从内存池收集交易的修改规则。
是否可以选择使用0值资产发送交易？ 所以代币在交易中，它的数量是0？不，那是不可能的
是否有选择发送“广告”交易？ 交易的该费用由自定义代币支付。 它可能是使用交换示例完成的，因此您可以创建一个为尔格购买代币的合约，当发件人要发送代币时—他会卖出所需数量的代币并将剩余的代币数量转移到里面一笔交易。
所以没有办法转移0.0000001的代币？ 尔格中的每个输出都应该包含一定量的尔格币。 交易费用可能为0，但您应该为每个创建的输出放一定数量的尔格币。</description>
    </item>
    
    <item>
      <title>问答环节记录。主链计划于5月26日发布</title>
      <link>https://ergoplatform.org/cn/news/2019-03-19/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-03-19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何创建跟设置Ergo全节点</title>
      <link>https://ergoplatform.org/cn/blog/2019_03_17_how_to_set/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2019_03_17_how_to_set/</guid>
      <description>节点安全性 为保证您的钱包和资产的安全，请格外注意以下几个节点使用中的注意事项：
 Ergo节点要求在设置文件中存储一定的关键安全参数，因此，切勿泄露您的设置文件。 Ergo节点已为内置钱包的交互提供了REST API（变现层状态转移编程接口）。灵敏API手段需要安全的通证，切勿采取非信任的渠道发送通证。  节点环境设置 您需要安装至少JRE 8.0 版本来运行Ergo节点。安装方法之一是通过Oracle执行的Java。
设置Ergo节点 当运行环境设置完备，您就可以下载最新版的Ergo客户端（Ergo client release）创建一个设置文件了。至于jar包，不需要单独下载，您只需要用SBT通过sbt assembly指令来克隆一份资源库，就可创建您自己的jar包
所有的设置参数都可以在默认设置文件（(default configuration file](https://github.com/ergoplatform/ergo/blob/master/src/main/resources/reference.conf)）中找到。在您的设置文件基础上，您只需重写您在默认值基础上想要进行改动的参数即可。比如，在该设置文件样本（sampleconfiguration file）中您可以查看最新的测试网，里面只包含了一些重要的参数。请注意，在这个样本文件中，您必须去除以下几行指令：
testMnemonic = ... testKeysQty = ... 现在，我们来运行下面几个重要步骤： 、设置一个API密钥： 设置API端口密钥。要想设置钱包，您需要先通过节点设置文件来设置apiKeyHash参数，参见此处。文件中要编辑替换：
javascript scorex.restApi.apiKeyHash = &amp;quot;replace_this_with_your_unique_api_key_hash&amp;quot; 
替换值是在运行您的API请求时生成的密码字符，是一串hex加密Blake2b256哈希数值。您可以使用这个脚本或任意其他脚本来计算blake2b哈希值。密码字符应该是一串随机字符，请务必保管妥善，切勿发给任何非信任方。 这个REST API终端也提供了一个（不受保护的）哈希计算办法：
/utils/hashBlake2b
初始化钱包： 这里就用到了前一个步骤提及的API端口密钥。第一次运行节点时，需要先通过REST API对钱包进行初始化，有两个办法可以做到：
  从头初始化（节点会生成一个种子文件）：向/wallet/init发送一个包含数据body: {&amp;quot;pass&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;mnemonicPass&amp;quot;: &amp;quot;abc&amp;quot;}的POST请求（提示：别忘了保存下来助记词，节点响应要用到。请求中的mnemonicPass参数是可选项，它用来保护助记词）
  从已有种子文件恢复钱包：该方法需要您提供助记词。向/wallet/restore发送一个包含数据body: {&amp;quot;pass&amp;quot;: &amp;quot;123&amp;quot;, &amp;quot;mnemonic&amp;quot;: &amp;quot;abandon abandon ...&amp;quot;, &amp;quot;mnemonicPass&amp;quot;: “abc”}的POST请求（提示：mnemonicPass部分只有在您的助记词有额外密码保护的情况下才用得到）。
  解锁钱包： 钱包初始化之后，向/wallet/unlock发送一个包含数据body: {&amp;quot;pass&amp;quot;: “123”}的POST请求（提示：使用您在初始阶段用的密码）
更多关于钱包的细节描述，请查看此处。
运行Ergo节点 用ergo-assembly-&amp;lt;version&amp;gt;.jar二进制和ergo.conf设置文件运行节点：
$ java -jar ergo-assembly-&amp;lt;version&amp;gt;.</description>
    </item>
    
    <item>
      <title>如何设置和配置尔格全节点</title>
      <link>https://ergoplatform.org/cn/news/2019-03-17-how-to-set-up-full-node/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-03-17-how-to-set-up-full-node/</guid>
      <description></description>
    </item>
    
    <item>
      <title>侧链2.0已发布！智能合约语言已更新</title>
      <link>https://ergoplatform.org/cn/news/2019-03-14/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/news/2019-03-14/</guid>
      <description></description>
    </item>
    
    <item>
      <title>为客户提供智能合约</title>
      <link>https://ergoplatform.org/cn/blog/2018_10_19-smart-contracts/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ergoplatform.org/cn/blog/2018_10_19-smart-contracts/</guid>
      <description>如今，很多与区块链相关的新闻都在告诉我们，银行X或Y公司将使用“区块链”来“降低成本”。基本上，这意味着大银行家认为另一个流行术语只是另一种以更有效的方式从某处提取价值的工具，也可以通过裁员来节省成本。
虽然我不想对“Satoshi的愿景”说什么（他离开后只能去猜测），但我在网络论坛用户早期见证下的广泛观点是加密货币应该提供能使普通人变得富裕的工具，他们的小企业背后提供的不是生活收入，而不是非个人化的大金融资本。从最初广泛的社区愿景看来，加密货币的工具应该允许人们进行经济活动，而不依赖于业务规模，地理位置，大公司设定的利率等等。这些工具应该允许人们签订合同（没有纸质合约，而是数字化，自我执行和合理智能的合约），这取决于司法管辖区，传统，遵循商业惯例等方面的差异。
我希望尔格在这方面发挥作用。成千上万的小型合作社和个体企业家对全球健康和可持续的财富增长更为重要，而不是几家公司在离岸天堂中牟利。
例如，让我们考虑一个合作联盟（如Radical Routes激进路线），愿意为数千公里以外的企业家提供经济援助（例如，在Rojava）。
我们现在需要假设一些细节。首先，假设网络中有四个合作社。他们在合约中共同锁定10,000 个尔格币（均分四等份，即每份2,500个尔格币），其中说明如下：
 合作社与公钥pubkeyA，pubkeyB，pubkeyC，pubkeyD相关联。企业家与公钥businessKey关联。 合作社将资金锁定在受融资合约保护的硬币中，然后进行尽职调查，并就是否为企业家提供资金进行投票。所有合约基金（10,000个尔格币）都是给企业家的，如果4个中有3个投了票的话。从技术上讲，投票是通过3/4阈值签名完成的。如果在区块编号1,000之前投票不成功（没有达到3/4的签名），任何合作社（实际上，任何人）都可以提交撤销交易，这将向每个合作社返回2,500个尔格币（至少）。此外，融资合同也将被称为投票合同。 投资可以花在三个目标上，并且有一些严格的限制。也就是说，企业家必须在设备上花费至少5,000个尔格币，在建造所需建筑时至少需要2,000个尔格币，企业家可能会随意花费其他资金。 为了确保设备资金将用于设备，合作社联合会使用企业家领域中已知设备销售商的公钥。例如，考虑设备销售商在该区域中使用公钥pubkeyTool1，pubkeyTool2，pubkeyTool3，pubkeyTool4。从技术上讲，转移是作为一个设备销售商的集体签名组织的（因此来自设备销售商的环签名和企业家的签名） 类似地，假设合作联盟中有3个创建者正在识别，与公钥pubkeyConstr1，pubkeyConstr2和pubkeyConstr3相关联。 与投票合约类似，如果设备和建设合约在5000号区块之前没有共同签署，联合合作社可以撤回资金。  在尔格中定义合约的方法有很多种。 低级语言尔格树中的一个脚本描述了一个（单个）逻辑条件，关于是否可以根据它使用硬币，以及支出交易提供的支出证明。 在内部，条件表示为类型化语法树这一名称。 该结构允许我们进行提前成本分析等。名为尔格脚本的高级语言允许具有更传统和可读的描述，使用变量并将逻辑分解为子程序。
让我们从上面（1-3）中定义的主合约开始：
{ val spendingSuccess = (pubkeyTool1 || pubkeyTool2 || pubkeyTool3 || pubkeyTool4) &amp;amp;&amp;amp; businessKey val withdrawCondition = HEIGHT &amp;gt; 5000L &amp;amp;&amp;amp; OUTPUTS(0).value &amp;gt;= 1250L &amp;amp;&amp;amp; OUTPUTS(0).propositionBytes == pubkeyA.propBytes &amp;amp;&amp;amp; OUTPUTS(1).value &amp;gt;= 1250L &amp;amp;&amp;amp; OUTPUTS(1).propositionBytes == pubkeyB.propBytes &amp;amp;&amp;amp; OUTPUTS(2).value &amp;gt;= 1250L &amp;amp;&amp;amp; OUTPUTS(2).propositionBytes == pubkeyC.propBytes &amp;amp;&amp;amp; OUTPUTS(3).value &amp;gt;= 1250L &amp;amp;&amp;amp; OUTPUTS(3).propositionBytes == pubkeyD.</description>
    </item>
    
  </channel>
</rss>