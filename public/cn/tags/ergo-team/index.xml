<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ergo Team on Ergo</title><link>https://ergoplatform.org/cn/tags/ergo-team/</link><description>Recent content in Ergo Team on Ergo</description><generator>Hugo -- gohugo.io</generator><language>cn</language><lastBuildDate>Mon, 02 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ergoplatform.org/cn/tags/ergo-team/index.xml" rel="self" type="application/rss+xml"/><item><title>如何设置与配置全尔格节点</title><link>https://ergoplatform.org/cn/blog/2019_12_02_how_to_setup/</link><pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate><guid>https://ergoplatform.org/cn/blog/2019_12_02_how_to_setup/</guid><description>本教程将解释如何安装与运行全尔格节点。其不涉及采矿相关的内容。
节点安全 节点的使用涉及几个重要方面的内容，你的钱包和钱的安全性取决于以下方面:
尔格节点需要在配置文件中存储安全关键参数。你永远不应把这个文件公开。 尔格节点提供用于与内置钱包互动的REST API。敏感的API方法需要一个安全令牌，你永远不要通过不可靠的渠道发送该令牌。 访问尔格REST API必须限制在认识的主机上。尤其是绝不允许通过互联网访问API。 先决条件 为了运行尔格节点，你需要JRE版本&amp;gt;= 将要安装的8。其中一种安装方式是使用 甲骨文安装Java.
接下来需要下载最新的尔格客户端发行版 jar文件，并且创建一个节点配置文件。
注意：你不用下载jar，你可以克隆资源库，然后通过发布sbt assembly指令，自己利用SBT 来创建jar。
ergo_folder是指存放jar的文件夹。
首席运行节点 创建在ergo_folder中含有以下文本的配置文件ergo.conf。
ergo { directory = ${ergo.directory}&amp;#34;/.ergo&amp;#34; node { mining = false } wallet.secretStorage.secretDir = ${ergo.directory}&amp;#34;/wallet/keystore&amp;#34; } 参数${ergo.directory}指向jar运行的目录。向ergo_folder开启命令提示符和cd。然后发出以下命令来首次运行节点：
java -jar ergo-&amp;lt;release&amp;gt;.jar --mainnet -c ergo.conf 之后节点将立即开始同步。API启动与进入到下一步需要等几分钟。
注意：对于文件你可以使用任何名称，而非ergo.conf。全部配置参数将被传送给该文件，你只需要重写你想修改缺省值的参数。上述配置文件实际上有缺省值。
计算你秘密的哈希值 首先，选择一个秘密来保护你的API。然后前往 http://127.0.0.1:9053/swagger#/utils/hashBlake2b 然后调用API来计算你秘密的哈希值。参考下图。
复制含有哈希值的回复以便下一步使用（参见下图）。在我们的例子中，秘密是是 hello 谁的哈希值对应324dcf027dd4a30a932c441f365a25e86b173defa4b8e58948253471b81b72cf.
重要提示：你必须使用不同且比较复杂的秘密.
利用API关键哈希值来更新配置文件 编辑配置文件ergo.conf然后粘贴前步所复制的哈希值。文件内容应当看似如下：
ergo { directory = ${ergo.directory}&amp;#34;/.ergo&amp;#34; node { mining = false } wallet.secretStorage.secretDir = ${ergo.directory}&amp;#34;/wallet/keystore&amp;#34; } scorex { restApi { # Hex-encoded Blake2b256 hash of an API key.</description></item></channel></rss>